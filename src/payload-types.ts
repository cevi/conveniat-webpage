/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This field indicates whether the document is published in the corresponding locale
 */
export type IsPublishedInCorrespondingLocale = boolean;
/**
 * The ID of the group as used in the CeviDB.
 */
export type TheIDOfTheGroup = number;
/**
 * The name of the group as used in the CeviDB.
 */
export type TheNameOfTheGroup = string;
/**
 * The name of the role the user has in the group.
 */
export type TheNameOfTheRole = string;
/**
 * The class of the role the user has in the group.
 */
export type TheClassOfTheRole = string;
/**
 * The groups the user is in as extracted from the CeviDB profile.
 */
export type GroupsOfTheUser = {
  id: TheIDOfTheGroup;
  name: TheNameOfTheGroup;
  role_name: TheNameOfTheRole;
  role_class: TheClassOfTheRole;
  [k: string]: unknown;
}[];
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    blog: Blog;
    'generic-page': GenericPage;
    timeline: Timeline;
    images: Image;
    documents: Document;
    users: User;
    forms: Form;
    'form-submissions': FormSubmission;
    'search-collection': SearchCollection;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    blog: BlogSelect<false> | BlogSelect<true>;
    'generic-page': GenericPageSelect<false> | GenericPageSelect<true>;
    timeline: TimelineSelect<false> | TimelineSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'search-collection': SearchCollectionSelect<false> | SearchCollectionSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    SEO: SEO;
    PWA: PWA;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    SEO: SEOSelect<false> | SEOSelect<true>;
    PWA: PWASelect<false> | PWASelect<true>;
  };
  locale: 'en' | 'de' | 'fr';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * Represents a block article that can be published on the website.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog".
 */
export interface Blog {
  id: string;
  publishingStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  _localized_status: LocalizedPublishingStatus;
  _disable_unpublishing?: boolean | null;
  _locale: string;
  /**
   * Name of the page for internal purposes.
   */
  internalPageName: string;
  content: {
    /**
     * This is the title that will be displayed on the page.
     */
    blogH1: string;
    bannerImage: string | Image;
    releaseDate: string;
    /**
     * This is the text that will be displayed as a teaser on the blog overview page.
     */
    blogShortTitle: string;
    /**
     * The main content of the page
     */
    mainContent: (
      | {
          richTextSection: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'richTextSection';
        }
      | {
          id?: string | null;
          blockName?: string | null;
          blockType: 'blogPostsOverview';
        }
      | {
          /**
           * This is the teaser that will be displayed on the page.
           */
          pageTeaser: string;
          callToAction: {
            /**
             * This is the call to action that will be displayed on the page.
             */
            linkLabel: string;
            /**
             * This is the link that the call to action will point to.
             */
            link: string;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'heroSection';
        }
      | FormBlock
      | {
          images: (string | Image)[];
          id?: string | null;
          blockName?: string | null;
          blockType: 'photoCarousel';
        }
      | {
          image: string | Image;
          id?: string | null;
          blockName?: string | null;
          blockType: 'singlePicture';
        }
      | YoutubeEmbedding
      | SwisstopoMapEmbedding
      | {
          file: string | Document;
          openInNewTab?: boolean | null;
          id?: string | null;
          blockName?: string | null;
          blockType: 'fileDownload';
        }
      | DetailsTable
    )[];
    /**
     * These keywords will be used for user search.
     */
    blogSearchKeywords?: string | null;
  };
  seo: {
    urlSlug: string;
    /**
     * This is the title that will be displayed in the browser tab.
     */
    metaTitle?: string | null;
    /**
     * This is the description that will be displayed in search engine results.
     */
    metaDescription?: string | null;
    /**
     * These are the keywords that will be used to improve the visibility of the page in search engines.
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Holds the publishing status of the document in each locale
 */
export interface LocalizedPublishingStatus {
  published: IsPublishedInCorrespondingLocale;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  /**
   * Describe the image for screen readers.
   */
  alt: string;
  /**
   * Optional text to display below the image (e.g. image source, copyright information, explanatory text)
   */
  imageCaption?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "YoutubeEmbedding".
 */
export interface YoutubeEmbedding {
  link: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'youtubeEmbed';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SwisstopoMapEmbedding".
 */
export interface SwisstopoMapEmbedding {
  initialMapPose?: {
    zoom?: number | null;
    /**
     * @minItems 2
     * @maxItems 2
     */
    initialMapCenter?: [number, number] | null;
  };
  /**
   * Markers on the map with a small Cevi logo
   */
  ceviLogoMarkers?:
    | {
        title?: string | null;
        geometry?: {
          /**
           * @minItems 2
           * @maxItems 2
           */
          coordinates?: [number, number] | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'swisstopoEmbed';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DetailsTable".
 */
export interface DetailsTable {
  introduction: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  detailsTableBlocks?:
    | {
        label: string;
        value: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'detailsTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-page".
 */
export interface GenericPage {
  id: string;
  publishingStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  _localized_status: LocalizedPublishingStatus;
  _disable_unpublishing?: boolean | null;
  _locale: string;
  /**
   * Name of the page for internal purposes.
   */
  internalPageName: string;
  content: {
    /**
     * This is the title that will be displayed on the page.
     */
    pageTitle: string;
    /**
     * The main content of the page
     */
    mainContent: (
      | {
          richTextSection: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'richTextSection';
        }
      | {
          id?: string | null;
          blockName?: string | null;
          blockType: 'blogPostsOverview';
        }
      | {
          /**
           * This is the teaser that will be displayed on the page.
           */
          pageTeaser: string;
          callToAction: {
            /**
             * This is the call to action that will be displayed on the page.
             */
            linkLabel: string;
            /**
             * This is the link that the call to action will point to.
             */
            link: string;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'heroSection';
        }
      | FormBlock
      | {
          images: (string | Image)[];
          id?: string | null;
          blockName?: string | null;
          blockType: 'photoCarousel';
        }
      | {
          image: string | Image;
          id?: string | null;
          blockName?: string | null;
          blockType: 'singlePicture';
        }
      | YoutubeEmbedding
      | SwisstopoMapEmbedding
      | {
          file: string | Document;
          openInNewTab?: boolean | null;
          id?: string | null;
          blockName?: string | null;
          blockType: 'fileDownload';
        }
      | DetailsTable
    )[];
  };
  seo: {
    urlSlug: string;
    /**
     * This is the title that will be displayed in the browser tab.
     */
    metaTitle?: string | null;
    /**
     * This is the description that will be displayed in search engine results.
     */
    metaDescription?: string | null;
    /**
     * These are the keywords that will be used to improve the visibility of the page in search engines.
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Represents a timeline that can be published on the website.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timeline".
 */
export interface Timeline {
  id: string;
  publishingStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  _localized_status: LocalizedPublishingStatus;
  _disable_unpublishing?: boolean | null;
  _locale: string;
  date: string;
  /**
   * This is the title that will be displayed on the page.
   */
  title: string;
  /**
   * The main content of the page
   */
  mainContent?:
    | (
        | {
            richTextSection: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'richTextSection';
          }
        | {
            image: string | Image;
            id?: string | null;
            blockName?: string | null;
            blockType: 'singlePicture';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Represents a Hitobito user. These information get automatically synced whenever the user logs in.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  /**
   * The ID of the user in the CeviDB.
   */
  cevi_db_uuid: number;
  email: string;
  /**
   * The full name of the user, as it will be displayed publicly.
   */
  fullName: string;
  /**
   * The Ceviname of the user.
   */
  nickname?: string | null;
  groups: GroupsOfTheUser;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-collection".
 */
export interface SearchCollection {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'blog';
    value: string | Blog;
  };
  content?: {
    blogH1?: string | null;
    blogShortTitle?: string | null;
    blogSearchKeywords?: string | null;
  };
  seo?: {
    urlSlug?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'blog';
        value: string | Blog;
      } | null)
    | ({
        relationTo: 'generic-page';
        value: string | GenericPage;
      } | null)
    | ({
        relationTo: 'timeline';
        value: string | Timeline;
      } | null)
    | ({
        relationTo: 'images';
        value: string | Image;
      } | null)
    | ({
        relationTo: 'documents';
        value: string | Document;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search-collection';
        value: string | SearchCollection;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog_select".
 */
export interface BlogSelect<T extends boolean = true> {
  publishingStatus?: T;
  _localized_status?: T;
  _disable_unpublishing?: T;
  _locale?: T;
  internalPageName?: T;
  content?:
    | T
    | {
        blogH1?: T;
        bannerImage?: T;
        releaseDate?: T;
        blogShortTitle?: T;
        mainContent?:
          | T
          | {
              richTextSection?:
                | T
                | {
                    richTextSection?: T;
                    id?: T;
                    blockName?: T;
                  };
              blogPostsOverview?:
                | T
                | {
                    id?: T;
                    blockName?: T;
                  };
              heroSection?:
                | T
                | {
                    pageTeaser?: T;
                    callToAction?:
                      | T
                      | {
                          linkLabel?: T;
                          link?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              formBlock?: T | FormBlockSelect<T>;
              photoCarousel?:
                | T
                | {
                    images?: T;
                    id?: T;
                    blockName?: T;
                  };
              singlePicture?:
                | T
                | {
                    image?: T;
                    id?: T;
                    blockName?: T;
                  };
              youtubeEmbed?: T | YoutubeEmbeddingSelect<T>;
              swisstopoEmbed?: T | SwisstopoMapEmbeddingSelect<T>;
              fileDownload?:
                | T
                | {
                    file?: T;
                    openInNewTab?: T;
                    id?: T;
                    blockName?: T;
                  };
              detailsTable?: T | DetailsTableSelect<T>;
            };
        blogSearchKeywords?: T;
      };
  seo?:
    | T
    | {
        urlSlug?: T;
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "YoutubeEmbedding_select".
 */
export interface YoutubeEmbeddingSelect<T extends boolean = true> {
  link?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SwisstopoMapEmbedding_select".
 */
export interface SwisstopoMapEmbeddingSelect<T extends boolean = true> {
  initialMapPose?:
    | T
    | {
        zoom?: T;
        initialMapCenter?: T;
      };
  ceviLogoMarkers?:
    | T
    | {
        title?: T;
        geometry?:
          | T
          | {
              coordinates?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DetailsTable_select".
 */
export interface DetailsTableSelect<T extends boolean = true> {
  introduction?: T;
  detailsTableBlocks?:
    | T
    | {
        label?: T;
        value?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "generic-page_select".
 */
export interface GenericPageSelect<T extends boolean = true> {
  publishingStatus?: T;
  _localized_status?: T;
  _disable_unpublishing?: T;
  _locale?: T;
  internalPageName?: T;
  content?:
    | T
    | {
        pageTitle?: T;
        mainContent?:
          | T
          | {
              richTextSection?:
                | T
                | {
                    richTextSection?: T;
                    id?: T;
                    blockName?: T;
                  };
              blogPostsOverview?:
                | T
                | {
                    id?: T;
                    blockName?: T;
                  };
              heroSection?:
                | T
                | {
                    pageTeaser?: T;
                    callToAction?:
                      | T
                      | {
                          linkLabel?: T;
                          link?: T;
                        };
                    id?: T;
                    blockName?: T;
                  };
              formBlock?: T | FormBlockSelect<T>;
              photoCarousel?:
                | T
                | {
                    images?: T;
                    id?: T;
                    blockName?: T;
                  };
              singlePicture?:
                | T
                | {
                    image?: T;
                    id?: T;
                    blockName?: T;
                  };
              youtubeEmbed?: T | YoutubeEmbeddingSelect<T>;
              swisstopoEmbed?: T | SwisstopoMapEmbeddingSelect<T>;
              fileDownload?:
                | T
                | {
                    file?: T;
                    openInNewTab?: T;
                    id?: T;
                    blockName?: T;
                  };
              detailsTable?: T | DetailsTableSelect<T>;
            };
      };
  seo?:
    | T
    | {
        urlSlug?: T;
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timeline_select".
 */
export interface TimelineSelect<T extends boolean = true> {
  publishingStatus?: T;
  _localized_status?: T;
  _disable_unpublishing?: T;
  _locale?: T;
  date?: T;
  title?: T;
  mainContent?:
    | T
    | {
        richTextSection?:
          | T
          | {
              richTextSection?: T;
              id?: T;
              blockName?: T;
            };
        singlePicture?:
          | T
          | {
              image?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  imageCaption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  cevi_db_uuid?: T;
  email?: T;
  fullName?: T;
  nickname?: T;
  groups?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-collection_select".
 */
export interface SearchCollectionSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  content?:
    | T
    | {
        blogH1?: T;
        blogShortTitle?: T;
        blogSearchKeywords?: T;
      };
  seo?:
    | T
    | {
        urlSlug?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Settings for the header navigation
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  mainMenu?:
    | {
        label: string;
        link: string;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Settings for the footer
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Menu item in the dark area of the footer
   */
  minimalFooterMenu?:
    | {
        label: string;
        link?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Menu item in the light area of the footer
   */
  footerMenu?:
    | {
        menuSubTitle: string;
        menuItem?:
          | {
              label: string;
              link?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Settings for the search engine optimization
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SEO".
 */
export interface SEO {
  id: string;
  /**
   * The title should be under 60 characters for mobile prefer 50. The title is shown in the Google search results and on desktop as the tab title. This field defines the default value for the title, but each page can have its own title.
   */
  defaultTitle: string;
  /**
   * The description should be under 155 characters for mobile prefer 105. The description is shown in the Google search results.
   */
  defaultDescription: string;
  /**
   * Keywords are not used by Google anymore, but other search engines might use them. Keywords are not shown directly to the user, but they are used by search engines to determine the content of the page. This field defines the default value for the keywords, but each page can have its own keywords.
   */
  defaultKeywords: {
    keyword: string;
    id?: string | null;
  }[];
  /**
   * The content publisher
   */
  publisher: string;
  /**
   * The HTML tag for Google Search Console verification. This tag is used to verify the ownership of the website in Google Search Console. Please paste only the content of the meta tag, not the whole meta, e.g. "gabchedl45s56dsaJKHfg_12M"
   */
  googleSearchConsoleVerification?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Settings for the Progressive Web App
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PWA".
 */
export interface PWA {
  id: string;
  /**
   * Once deployed as an PWA App to the App Store, this name will be used as the App Name. A change will require a new deployment to the App Store.
   */
  appName: string;
  /**
   * Once deployed as an PWA App to the App Store, this name will be used as the App Name. A change will require a new deployment to the App Store.
   */
  appShortName: string;
  /**
   * Once deployed as an PWA App to the App Store, this description will be used as the App Description. A change will require a new deployment to the App Store.
   */
  appDescription: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  mainMenu?:
    | T
    | {
        label?: T;
        link?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  minimalFooterMenu?:
    | T
    | {
        label?: T;
        link?: T;
        id?: T;
      };
  footerMenu?:
    | T
    | {
        menuSubTitle?: T;
        menuItem?:
          | T
          | {
              label?: T;
              link?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SEO_select".
 */
export interface SEOSelect<T extends boolean = true> {
  defaultTitle?: T;
  defaultDescription?: T;
  defaultKeywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  publisher?: T;
  googleSearchConsoleVerification?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PWA_select".
 */
export interface PWASelect<T extends boolean = true> {
  appName?: T;
  appShortName?: T;
  appDescription?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}