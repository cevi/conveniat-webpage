services:
  payload:
    build:
      context: .
      dockerfile: dev.Dockerfile
    ports:
      - '3000:3000'
      - '5555:5555'
    volumes:
      - .:/home/node/app
      - next-cache:/home/node/app/.next
      - node-cache:/nodecache
      - node_modules:/home/node/app/node_modules
    working_dir: /home/node/app/
    command: >
      sh -c "export PRISMA_OUTPUT='src/lib/prisma/client/' &&
      npx prisma generate &&
      npx prisma db push &&
      npx prisma studio &
      corepack enable pnpm && pnpm i --frozen-lockfile &&
      sh /home/node/app/create_build_info.sh &&
      if [ \"$ENABLE_SERVICE_WORKER_LOCALLY\" = \"true\" ]; then
        echo '' &&
        echo '**************************************************' &&
        echo '*   WARNING: SERVICE WORKER ENABLED              *' &&
        echo '*   Turbopack is DISABLED. Dev server will be    *' &&
        echo '*   significantly SLOWER.                        *' &&
        echo '**************************************************' &&
        echo '' &&
        pnpm devsafe
      else
        echo 'Service worker disabled' &&
        pnpm dev
      fi"
    dns:
      - 8.8.8.8
    depends_on:
      - mongo
    env_file:
      - .env
    environment:
      - NODE_COMPILE_CACHE=/nodecache # see https://nodejs.org/en/blog/release/v22.1.0

    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/status | grep -q ''"status":"ok"''']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongo:
    image: mongo:latest
    ports:
      - '27017:27017'
    command: mongod --quiet --logpath /dev/null  --storageEngine=wiredTiger
    volumes:
      - data:/data/db
    logging:
      driver: none

  mongo-express:
    image: mongo-express
    ports:
      - '8081:8081'
    depends_on:
      - mongo
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: 'admin'
      ME_CONFIG_BASICAUTH_PASSWORD: 'pass'
      ME_CONFIG_MONGODB_SERVER: mongo
    logging:
      driver: none

  minio:
    image: minio/minio

    entrypoint: sh
    command: >
      -c "mkdir -p /data/${MINIO_BUCKET_NAME} &&
      /usr/bin/minio server --console-address ':9001' /data & 
      sleep 10 &&
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc admin user svcacct add --access-key '${MINIO_ACCESS_KEY_ID}' --secret-key '${MINIO_SECRET_ACCESS_KEY}' myminio ${MINIO_ROOT_USER} || true &&
      echo 'minio is ready' &&
      sleep infinity"

    env_file:
      - .env

    ports:
      - '9000:9000'
      - '9001:9001'

    volumes:
      - minio-data:/data

  fake-oauth:
    build: dev-oauth
    ports:
      - '3001:5000'
    restart: always

  postgres:
    image: postgres:latest

    ports:
      - '5432:5432'

    env_file:
      - .env

    volumes:
      - postgress-data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - logging-prometheus-storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
      - '--enable-feature=native-histograms'
    ports:
      - '9090:9090'

  tempo:
    user: '0:0'
    image: grafana/tempo:latest
    command: ['-config.file=/etc/tempo/tempo.yml']
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo/tempo.yml
      - logging-tempo-data:/tmp/tempo
    ports:
      - '3200' # tempo
      - '4317' # otlp grpc
      - '4318' # otlp http

  loki:
    image: grafana/loki
    ports:
      - '3100:3100'
    command:
      - --config.file=/mnt/config/loki-config.yml
    volumes:
      - ./observability/loki/loki-config.yml:/mnt/config/loki-config.yml:ro

  grafana:
    image: grafana/grafana
    volumes:
      - logging-grafana-storage:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/etc/dashboards
    environment:
      - GF_LOG_LEVEL=error
    ports:
      - '9050:3000' # localhost:9050 for accessing grafana

volumes:
  data:
  node_modules:
  next-cache:
  minio-data:
  node-cache:
  postgress-data:

  # Volumes for observability components
  logging-prometheus-storage:
  logging-grafana-storage:
  logging-tempo-data:
